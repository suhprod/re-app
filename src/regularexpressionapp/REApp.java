/*
 * A Simple Program For Practicing Regular Expression!
 */

/*
 * REApp.java
 *
 * Created on Nov 30, 2012, 9:28:34 PM
 */

package regularexpressionapp;

import java.awt.*;
import java.util.*;
import java.io.*;
import javax.swing.*;
import javax.swing.filechooser.*;

/**
 *
 * @author SUH Productions
 */


class RE{
	private String re;
	public RE(){
		re=null;
	}
	public RE(String r){
		re=r;
	}
	public String getRE(){
		return re;
	}
	public void setRe(String r){
		re=r;
	}
	public boolean checkRE(String str){
		if(re!=null){
			if(str.matches(re)){
				return true;
			}
		}
		else{
			return false;
		}
		return false;
	}
}

class Word{
    private String exp;
    private String test;
    public Word(){
        exp=null;
        test=null;
    }
    public Word(String e,String t){
        exp=e;
        test=t;
    }
    public String getExpression(){ return exp; }
    public String getTest(){ return test; }
    public void setExpression(String e){ exp=e; }
    public void setTest(String t){ test=t; }
    @Override
    public String toString(){
        return "\nRegular Expression: "+exp+"\nTest String: "+test;
    }
}

class WordList{
    private LinkedList ll;
    public WordList(){
        ll=new LinkedList();
    }
    public void addWord(Word w){ ll.add(w); }
    public Word getWord(int ind){
        if(ind<0 || ind>=this.getSize()){
            return null;
        }
        return (Word) ll.get(ind);
    }
    public Word[] getAllWord(){
        if(this.getSize()==0){
            return null;
        }
        Word wordArr[]=new Word[this.getSize()];
        for(int i=0;i<(this.getSize());i++){
            wordArr[i]=(Word)ll.get(i);
        }
        return wordArr;
    }
    public boolean searchWord(Word w){
        Word temp;
        for(int i=0;i<(this.getSize());i++){
            temp=(Word)ll.get(i);
            if((temp.getExpression().equals(w.getExpression())) && (temp.getTest().equals(w.getTest()))){
                return true;
            }
        }
        return false;
    }
    public int getSize(){ return ll.size(); }
}

/*
class onlyTXT implements FilenameFilter{
    private String ext;
    public onlyTXT(String e){
        ext="."+e;
    }
    public boolean accept(File file, String name){
        return name.endsWith("ext");
    }
}
*/


public class REApp extends javax.swing.JFrame {

    /** Creates new form REApp */
    public REApp() {
        initComponents();
        wl=new WordList();

        jfile=new JFileChooser();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        exp = new javax.swing.JTextField();
        test = new javax.swing.JTextField();
        check = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        result = new javax.swing.JLabel();
        rsl = new javax.swing.JLabel();
        pic = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        save = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RegularExpression App");
        setBackground(java.awt.SystemColor.activeCaption);
        setForeground(java.awt.SystemColor.activeCaption);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("DialogInput", 0, 12));
        jLabel1.setText("Enter Your Expression:");

        jLabel2.setFont(new java.awt.Font("DialogInput", 0, 12));
        jLabel2.setText("Enter Testing String: ");

        exp.setFont(new java.awt.Font("Levenim MT", 0, 12)); // NOI18N
        exp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                expFocusGained(evt);
            }
        });

        test.setFont(new java.awt.Font("Levenim MT", 0, 12)); // NOI18N
        test.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                testFocusGained(evt);
            }
        });

        check.setText("Check It!");
        check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkActionPerformed(evt);
            }
        });

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        result.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        rsl.setFont(new java.awt.Font("DialogInput", 0, 14));
        rsl.setText("Result: ");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/regularexpressionapp/re.jpg"))); // NOI18N

        javax.swing.GroupLayout picLayout = new javax.swing.GroupLayout(pic);
        pic.setLayout(picLayout);
        picLayout.setHorizontalGroup(
            picLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
        );
        picLayout.setVerticalGroup(
            picLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 83, Short.MAX_VALUE)
        );

        save.setText("Save");
        save.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                saveMouseEntered(evt);
            }
        });
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rsl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(result, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(test, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                            .addComponent(exp, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(check)
                                .addGap(36, 36, 36)
                                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)))))
                .addContainerGap())
            .addComponent(pic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(exp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(test, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(save)
                            .addComponent(exit)
                            .addComponent(check))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(result, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(rsl)))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkActionPerformed
        // TODO add your handling code here:
        String expr=exp.getText();
        String tst=test.getText();
        if(expr.length()>0 && tst.length()>0){
            RE re=new RE(expr);
            if(re.checkRE(tst)){
                rsl.setVisible(true);
                result.setForeground(Color.blue);
                result.setText("CORRECT! Your Expression and Test String are Correct.");
                Word w=new Word(expr,tst);
                if(!wl.searchWord(w)){
                    wl.addWord(w);
                }
            }
            else{
                rsl.setVisible(true);
                result.setForeground(Color.red);
                result.setText("WRONG! Your work didnt Worked out well.");
            }
        }
        else{
            JOptionPane.showMessageDialog(rootPane, "Your TextBoxes are Empty!");
        }
        
    }//GEN-LAST:event_checkActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void expFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_expFocusGained
        // TODO add your handling code here:
        rsl.setVisible(false);
        result.setText("");
    }//GEN-LAST:event_expFocusGained

    private void testFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_testFocusGained
        // TODO add your handling code here:
        rsl.setVisible(false);
        result.setText("");
    }//GEN-LAST:event_testFocusGained

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        if(wl.getSize()>0){
            result.setText("");
            //file.setVisible(true);
            jfile.setCurrentDirectory(new File("."));
            jfile.setDialogTitle("Select Save Location");
            jfile.setFileSelectionMode(JFileChooser.SAVE_DIALOG);
            jfile.setAcceptAllFileFilterUsed(false);
            jfile.setFileFilter(new FileNameExtensionFilter("Text Files (*.txt)","txt"));
            jfile.showSaveDialog(this);
            File fil=jfile.getSelectedFile();

            String filename=fil.toString();

            try{
                File f=new File(filename+".txt");
                f.createNewFile();
                int size=wl.getSize();
                Word w[]=new Word[size];
                w=wl.getAllWord();
                FileWriter fw = new FileWriter(filename+".txt");
                PrintWriter pw = new PrintWriter(fw);
                for(int i=0;i<size;i++){
                    try{
                        String exp=w[i].getExpression();
                        String tst=w[i].getTest();
                        pw.println();
                        pw.println("Regular Expression: "+exp);
                        pw.println("Test String: "+tst);
                        pw.println();
                    }
                    catch (Exception e){JOptionPane.showMessageDialog(rootPane, "ERROR! Cannot write to file...");}
                }
                pw.close();
                f.setReadOnly();
            }catch(Exception ex){
                JOptionPane.showMessageDialog(rootPane, "ERROR! Cannot create new file...");
            }
        }
        else{
            JOptionPane.showMessageDialog(rootPane, "You Havent Created any Correct Expressions in this Session!");
        }

        
        
    }//GEN-LAST:event_saveActionPerformed

    private void saveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveMouseEntered
        // TODO add your handling code here:
        save.setToolTipText("This Saves Your correct Expressions and their tests to a text file!");
    }//GEN-LAST:event_saveMouseEntered

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new REApp().setVisible(true);
            }
        });
    }
    private WordList wl;
    private JFileChooser jfile;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton check;
    private javax.swing.JButton exit;
    private javax.swing.JTextField exp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel pic;
    private javax.swing.JLabel result;
    private javax.swing.JLabel rsl;
    private javax.swing.JButton save;
    private javax.swing.JTextField test;
    // End of variables declaration//GEN-END:variables
}
